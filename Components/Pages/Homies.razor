@page "/homies"
@rendermode InteractiveServer
@using System.Text.Json
@inject IJSRuntime JsRuntime

<h3>List of Staff</h3>

@if (staff == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>
        <input @bind="newNotes"/>&nbsp;
        <button class="btn btn-primary" @onclick="AddNewNotes">Add Staff</button>
    </p>

    <table class="table">
        <thead>
            <tr>
                <th>Username</th>
                <th>Email</th>
                <th>PhoneNumber</th>
                <th>Skillsets</th>
                <th>Hobby</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var note in staff)
            {
                <tr>
                    <td>@note.Username</td>
                    <td>@note.Email</td>
                    <td>@note.PhoneNumber</td>
                    <td>@note.Skillsets</td>
                    <td>@note.Hobby</td>
                    <td>
                        @* <button class="btn btn-primary" @onclick="(() => DeleteNotes(note.Id))">Edit</button> |
                        <button class="btn btn-primary" @onclick="(() => DeleteNotes(note.Id))">Details</button> | *@
                        <button class="btn btn-primary" @onclick="(() => DeleteNotes(note.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code{
    public string newNotes = "";

    public class Staff
    {
        public int Id { get; set; }
        public string Username { get; set; }
        public string Email { get; set; }
        public string PhoneNumber { get; set; }
        public string Skillsets { get; set; }
        public string Hobby { get; set; }
    }

    string API_URL = "https://localhost:7186/";

    private IEnumerable<Staff> staff = Array.Empty<Staff>();

    private async Task refreshList(){
        HttpClient httpClient = new HttpClient();
        HttpResponseMessage response = await httpClient.GetAsync(API_URL + "api/Home/GetNotes");
        httpClient.Dispose();

        using var responseStream = await response.Content.ReadAsStreamAsync();
        staff = await JsonSerializer.DeserializeAsync<IEnumerable<Staff>>(responseStream);
    }

    private async Task AddNewNotes()
    {
        var formData = new MultipartFormDataContent();
        formData.Add(new StringContent(newNotes), "newNotes");

        HttpClient httpClient = new HttpClient();
        HttpResponseMessage response = await httpClient.PostAsync(API_URL + "api/Home/AddNotes", formData);
        httpClient.Dispose();
        using var responseStream = await response.Content.ReadAsStreamAsync();

        // staff = await JsonSerializer.DeserializeAsync<IEnumerable<Staff>>(responseStream);
        string res = response.Content.ReadAsStringAsync().Result;
        await JsRuntime.InvokeVoidAsync("alert", res);
        await this.refreshList();
    }

    private async Task DeleteNotes(int Id)
    {
        HttpClient httpClient = new HttpClient();
        HttpResponseMessage response = await httpClient.DeleteAsync(API_URL + "api/Home/DeleteNotes?id="+Id);
        // httpClient.Dispose();
        // using var responseStream = await response.Content.ReadAsStreamAsync();
        // string res = response.Content.ReadAsStringAsync().Result;

        try
        {
            // var response = await Http.PostAsJsonAsync("api/yourEndpoint", yourDataObject);

            if (!response.IsSuccessStatusCode)
            {
                // Handle non-success status codes.
                await HandleErrorResponse(response);
            }
            else
            {
                // Process the response if successful.
                // var responseData = await response.Content.ReadFromJsonAsync<YourResponseType>();
                // Use responseData as needed
            }
        }
        catch (HttpRequestException httpEx)
        {
            // Handle network-related errors
            Console.WriteLine($"An error occurred connecting to the API: {httpEx.Message}");
        }
        catch (Exception ex)
        {
            // Handle other errors
            Console.WriteLine($"An unexpected error occurred: {ex.Message}");
        }

        string res = response.Content.ReadAsStringAsync().Result;

        await JsRuntime.InvokeVoidAsync("alert", res);
        await this.refreshList();
    }

    private async Task HandleErrorResponse(HttpResponseMessage response)
    {
        // Check if the response includes details about the error
        var errorContent = await response.Content.ReadAsStringAsync();
        if (!string.IsNullOrEmpty(errorContent))
        {
            // Log or display the error based on your application's needs
            Console.WriteLine($"API Error: {errorContent}");
        }

        switch (response.StatusCode)
        {
            case System.Net.HttpStatusCode.BadRequest:
                // Handle bad request errors
                Console.WriteLine("The request was invalid. Please check your input and try again.");
                break;
            // Add cases for other status codes as needed
            default:
                Console.WriteLine("An unknown error occurred.");
                break;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await this.refreshList();
    }
}