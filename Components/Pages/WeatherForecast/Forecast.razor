@page "/"
@page "/WeatherForecast/ForecastOriginal"
@using System.Text.Json
@using WeatherForecastUI.Model
@rendermode InteractiveServer

<h3>Weather Forecast</h3>

@* <div class="form-group">
    <label for="longitude">Longitude:</label>
    <input id="longitude" class="form-control" @bind="Longitude" @oninput="ValidateLongitude" />
    <p style="display: @LongitudeErrorMessageDisplay; color: red; font-weight: bold;">Please insert a valid Longitude value (number with\without decimal point value only)</p>
</div>

<div class="form-group">
    <label for="latitude">Latitude:</label>
    <input id="latitude" class="form-control" @bind="Latitude" @oninput="ValidateLatitude" />
    <p style="display: @LatitudeErrorMessageDisplay; color: red; font-weight: bold;">Please insert a valid Latitude value (number with\without decimal point value only)</p>
</div>

<input type="button" class="@submitButtonClass" disabled="@submitButtonDisabled" @onclick="ForecastWeather" value="Forecast Weather" />
 *@

<form>
    <div class="row">
        <div class="col-md-8">
            <div class="for-group">
                <label for="Longitude" class="control-label">Longitude :</label>
                <input @bind="Longitude" @oninput="ValidateLongitude" />&nbsp;
                <p style="display: @LongitudeErrorMessageDisplay; color: red; font-weight: bold;">Please insert a valid Longitude value (number with\without decimal point value only)</p>
            </div><br />
            <div class="for-group">
                <label for="Latitude" class="control-label">Latitude  :</label>
                <input @bind="Latitude" @oninput="ValidateLatitude" />&nbsp;
                <p style="display: @LatitudeErrorMessageDisplay; color: red; font-weight: bold;">Please insert a valid Latitude value (number with\without decimal point value only)</p>
            </div><br />
        </div>
    </div>
    <div class="row">
        <div class="col-md-8">
            <div class="form-group">
                <input type="button" class="@submitButtonClass" disabled="@submitButtonDisabled" @onclick="ForecastWeatherExternalAPI" value="Forecast Weather" />
                <input type="button" class="btn btn-danger" @onclick="ResetInputValues" value="Reset" />
            </div>
        </div>
    </div>
</form>
<br />

@if (isTableVisible)
{
    <table class="table">
        <thead>
            <tr>
                <th>Description</th>
                <th>Values</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Date</td>
                <td role="status">@WeatherDate</td>
            </tr>
            <tr>
                <td>Temperature</td>
                <td role="status">@WeatherTemperature</td>
            </tr>
            <tr>
                <td>Summary</td>
                <td role="status">@WeatherSummary</td>
            </tr>
        </tbody>
    </table>
}

@code {
    string API_URL = "https://localhost:7186/";

    private double? Latitude { get; set; }
    private double? Longitude { get; set; }

    private string LongitudeErrorMessageDisplay = "none";
    private string LatitudeErrorMessageDisplay  = "none";

    private bool submitButtonDisabled = false;
    private string submitButtonClass = "btn btn-success";

    Location obj = new Location();
    private bool isTableVisible = false;

    private string WeatherDate { get; set; }
    private string WeatherTemperature { get; set; }
    private string WeatherSummary { get; set; }

    private void ValidateLongitude(ChangeEventArgs e)
    {
        if (!double.TryParse(e.Value.ToString(), out double value))
        {
            LongitudeErrorMessageDisplay = "block";
            submitButtonDisabled = true;
            submitButtonClass = "btn btn-secondary"; // Change button class
            return;
        }

        if (string.IsNullOrWhiteSpace(e.Value.ToString()))
        {
            LongitudeErrorMessageDisplay = "block";
            submitButtonDisabled = true;
            submitButtonClass = "btn btn-secondary"; // Change button class
            return;
        }

        Longitude = value; // Update the Longitude property if valid
        LongitudeErrorMessageDisplay = "none"; // Hide Longitude error message
        submitButtonDisabled = false;
        submitButtonClass = "btn btn-success"; // Reset button class
    }

    private void ValidateLatitude(ChangeEventArgs e)
    {
        if (!double.TryParse(e.Value.ToString(), out double value))
        {
            LatitudeErrorMessageDisplay = "block";
            submitButtonDisabled = true;
            submitButtonClass = "btn btn-secondary"; // Change button class
            return;
        }

        if (string.IsNullOrWhiteSpace(e.Value.ToString()))
        {
            LatitudeErrorMessageDisplay = "block";
            submitButtonDisabled = true;
            submitButtonClass = "btn btn-secondary"; // Change button class
            return;
        }

        Latitude = value; // Update the Latitude property if valid
        LatitudeErrorMessageDisplay = "none"; // Hide Latitude error message
        submitButtonDisabled = false;
        submitButtonClass = "btn btn-success"; // Reset button class
    }

    private void ResetInputValues()
    {
        isTableVisible = false;

        Longitude = null;
        Latitude = null;

        LongitudeErrorMessageDisplay = "none";
        LatitudeErrorMessageDisplay = "none";
        submitButtonDisabled = false;
        submitButtonClass = "btn btn-success";
    }

    private async void ForecastWeatherExternalAPI()
    {
        isTableVisible = true;

        var formData = new MultipartFormDataContent();
        formData.Add(new StringContent(obj.Longitude.ToString()), "Longitude");
        formData.Add(new StringContent(obj.Latitude.ToString()), "Latitude");

        string FullAPI_URL = API_URL + "api/Home/GetWeatherForecast";

        HttpClient httpClient = new HttpClient();

        try
        {
            HttpResponseMessage response = await httpClient.PostAsync(FullAPI_URL, formData);

            if (!response.IsSuccessStatusCode)
            {
                string result = response.Content.ReadAsStringAsync().Result;
                throw new Exception("Error Occured at the API Endpoint, Error Info " + result);
            }
            else
            {
                var json = await response.Content.ReadAsStringAsync();
                var weatherData = JsonSerializer.Deserialize<Weather>(json);

                WeatherDate = weatherData.Date.ToShortDateString();
                WeatherTemperature = weatherData.Temperature.ToString();
                WeatherSummary = weatherData.Summary;

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            throw new Exception("Error Occured ath the API Endpoint, Error Info" + ex.Message);
        }
        finally { };

    }
}