@page "/WeatherForecast/Forecast"
@using System.Text.Json
@using WeatherForecastUI.Model
@inject WeatherForecastUI.Services.GlobalSettings.GlobalSettingsService globalSettingsService
@inject WeatherForecastUI.Services.API.APIGateway APIGateway
@rendermode InteractiveServer

<h3>Weather Forecast</h3>

<form>
    <div class="row">
        <div class="col-md-8">
            <div class="for-group">
                <label for="Longitude" class="control-label">Longitude :</label>
                <input @bind="Longitude" @oninput="ValidateLongitude" />&nbsp;
                <p style="display: @LongitudeErrorMessageDisplay; color: red; font-weight: bold;">Please insert a valid Longitude value (number with\without decimal point value only)</p>
            </div><br />
            <div class="for-group">
                <label for="Latitude" class="control-label">Latitude  :</label>
                <input @bind="Latitude" @oninput="ValidateLatitude" />&nbsp;
                <p style="display: @LatitudeErrorMessageDisplay; color: red; font-weight: bold;">Please insert a valid Latitude value (number with\without decimal point value only)</p>
            </div><br />
        </div>
    </div>
    <div class="row">
        <div class="col-md-8">
            <div class="form-group">
                <input type="button" class="@submitButtonClass" disabled="@submitButtonDisabled" @onclick="ForecastWeatherExternalAPI" value="Forecast Weather" />
                <input type="button" class="btn btn-danger" @onclick="ResetInputValues" value="Reset" />
            </div>
        </div>
    </div>
</form>
<br />

@if (isTableVisible)
{
    <table class="table">
        <thead>
            <tr>
                <th>Description</th>
                <th>Values</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Date</td>
                <td role="status">@WeatherDate</td>
            </tr>
            <tr>
                <td>Temperature (C)</td>
                <td role="status">@WeatherTemperature°C</td>
            </tr>
            <tr>
                <td>Summary</td>
                <td role="status">@WeatherSummary</td>
            </tr>
        </tbody>
    </table>
}

@code {
    private double? Latitude { get; set; }
    private double? Longitude { get; set; }

    private string LongitudeErrorMessageDisplay = "none";
    private string LatitudeErrorMessageDisplay  = "none";

    private bool submitButtonDisabled = false;
    private string submitButtonClass = "btn btn-success";

    private bool isTableVisible = false;

    private string WeatherDate { get; set; }
    private string WeatherTemperature { get; set; }
    private string WeatherSummary { get; set; }

    private void ValidateLongitude(ChangeEventArgs e)
    {
        ValidateInput(e.Value.ToString(), "Longitude");
    }

    private void ValidateLatitude(ChangeEventArgs e)
    {
        ValidateInput(e.Value.ToString(), "Latitude");
    }

    private bool ValidateInput(string value, string fieldName)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            SetErrorMessageDisplay(true, fieldName);
            return false;
        }

        if (!double.TryParse(value, out double doubleValue))
        {
            SetErrorMessageDisplay(true, fieldName);
            return false;
        }

        // No error, reset error message and button properties
        SetErrorMessageDisplay(false, fieldName);
        return true;
    }

    private void SetErrorMessageDisplay(bool display, string fieldName)
    {
        if (fieldName == "Longitude")
        {
            LongitudeErrorMessageDisplay = display ? "block" : "none";
            isTableVisible = false;
        }
        else if (fieldName == "Latitude")
        {
            LatitudeErrorMessageDisplay = display ? "block" : "none";
            isTableVisible = false;
        }

        submitButtonDisabled = display;
        submitButtonClass = display ? "btn btn-secondary" : "btn btn-success";
    }

    private void ResetInputValues()
    {
        isTableVisible = false;

        Longitude = null;
        Latitude = null;

        LongitudeErrorMessageDisplay = "none";
        LatitudeErrorMessageDisplay = "none";
        submitButtonDisabled = false;
        submitButtonClass = "btn btn-success";
    }

    private async void ForecastWeatherExternalAPI()
    {
        var IsValidateLongitude = ValidateInput(Longitude.ToString(), "Longitude");
        var IsValidateLatitude  = ValidateInput(Latitude.ToString(), "Latitude");

        if (IsValidateLongitude == true && IsValidateLatitude == true)
        {
            try
            {
                isTableVisible = true;

                Location obj = new Location();

                var formData = new MultipartFormDataContent();
                formData.Add(new StringContent(obj.Longitude.ToString()), "Longitude");
                formData.Add(new StringContent(obj.Latitude.ToString()), "Latitude");

                string FullAPI_URL = globalSettingsService.APIurl.ToString() + "api/Home/GetWeatherForecast";
                string jsonData = await APIGateway.ForecastWeatherExternalAPI(FullAPI_URL, formData);
                var weatherData = JsonSerializer.Deserialize<Weather>(jsonData);

                WeatherDate = weatherData.Date.ToShortDateString();
                WeatherTemperature = weatherData.Temperature.ToString();
                WeatherSummary = weatherData.Summary;

                StateHasChanged();
            }
            catch (Exception ex)
            {
                throw new Exception($"An error occurred: {ex.Message}");
            }
        }

    }
}