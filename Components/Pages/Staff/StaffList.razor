@page "/"
@page "/Staff/staffList"
@using WeatherForecastUI.Model
@inject WeatherForecastUI.Services.UserService userService
@inject WeatherForecastUI.Services.GlobalSettings.GlobalSettingsService globalSettingsService

<h3>List of Staff</h3>

@if (EmpObj == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <NavLink class="nav-link" href="Staff/AddNewStaff">
        <span class="oi oi-plus" aria-hidden="true">Add New Staff</span>
    </NavLink>

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Username</th>
                <th>Email</th>
                <th>PhoneNumber</th>
                <th>Skillsets</th>
                <th>Hobby</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in EmpObj)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Username</td>
                    <td>@item.Email</td>
                    <td>@item.PhoneNumber</td>
                    <td>@item.Skillsets</td>
                    <td>@item.Hobby</td>
                    <td>
                        <a class="nav-link btn btn-primary" href="Staff/EditStaff/@item.Id">
                            <span class="oi oi-pencil" aria-hidden="true">Edit</span>
                        </a>
                        <a class="nav-link btn btn-danger" href="Staff/DeleteStaff/@item.Id">
                            <span class="oi oi-trash" aria-hidden="true">Delete</span>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code{
    List<User> EmpObj;

    protected override async Task OnInitializedAsync()
    {
        @if (globalSettingsService.IsUsingExternalAPI == false) // CRUD using internal services
        {
            EmpObj = await Task.Run(() => userService.GetAllUsers());
        }
        else //CRUD using request to external API
        {            
            string FullAPI_URL = globalSettingsService.APIurl.ToString() + "api/Home/GetAllStaff";

            HttpClient httpClient = new HttpClient();
            EmpObj = await httpClient.GetFromJsonAsync<List<User>>(FullAPI_URL);
        }
    }

    private async void GetStaffList()
    {
        string FullAPI_URL = globalSettingsService.APIurl.ToString() + "api/Home/GetAllStaff";

        HttpClient httpClient = new HttpClient();

        try
        {
            HttpResponseMessage response = await httpClient.GetAsync(FullAPI_URL);

            if (!response.IsSuccessStatusCode)
            {
                string result = response.Content.ReadAsStringAsync().Result;
                throw new Exception("Error Occured at the API Endpoint, Error Info " + result);
            }
            else
            {
                using var responseStream = await response.Content.ReadAsStreamAsync();
                string res = response.Content.ReadAsStringAsync().Result;
            }
        }
        catch (Exception ex)
        {
            throw new Exception("Error Occured ath the API Endpoint, Error Info" + ex.Message);
        }
        finally { };

    }

}