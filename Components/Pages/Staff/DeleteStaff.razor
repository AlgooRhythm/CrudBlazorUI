@page "/Staff/DeleteStaff/{Id}"
@using WeatherForecastUI.Model
@inject WeatherForecastUI.Services.UserService userService
@inject WeatherForecastUI.Services.GlobalSettings.GlobalSettingsService globalSettingsService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@inject IJSRuntime JsRuntime
@using System.Text.Json
@using System.Text

<h3>Delete Staff</h3>

<form>
    <div class="row">
        <div class="col-md-8">
            <div class="for-group">
                <label for="Id" class="control-label">Id</label>
                <input form="Id" class="form-control" @bind="obj.Id" readonly="true"></input>
            </div><br />
            <div class="for-group">
                <label for="Username" class="control-label">Username</label>
                <input form="Username" class="form-control" @bind="obj.Username" readonly="true"></input>
            </div><br />
            <div class="for-group">
                <label for="Email" class="control-label">Email</label>
                <input form="Email" class="form-control" @bind="obj.Email" readonly="true"></input>
            </div><br/>
            <div class="for-group">
                <label for="PhoneNumber" class="control-label">Phone Number</label>
                <input form="PhoneNumber" class="form-control" @bind="obj.PhoneNumber" readonly="true"></input>
            </div><br />
            <div class="for-group">
                <label for="Skillsets" class="control-label">Skillsets</label>
                <input form="Skillsets" class="form-control" @bind="obj.Skillsets" readonly="true"></input>
            </div><br />
            <div class="for-group">
                <label for="Hobby" class="control-label">Hobby</label>
                <input form="Hobby" class="form-control" @bind="obj.Hobby" readonly="true"></input>
            </div><br />
            <br />
        </div>
    </div>
    <div class="row">
        <div class="col-md-8">
            <div class="form-group">
                @if (globalSettingsService.IsUsingExternalAPI == false)
                {
                    <input type="button" style="margin-right: 10px;" class="btn btn-danger" @onclick="@DeleteStaffInternalServices" value="Delete Staff" />
                }
                else
                {
                    <input type="button" style="margin-right: 10px;" class="btn btn-danger" @onclick="@DeleteStaffExternalAPI" value="Delete Staff" />
                }
                <input type="button" class="btn btn-warning" @onclick="@Cancel" value="Cancel" />
            </div>
        </div>
    </div>
</form>

@code {
    [Parameter]
    public string Id { get; set; }

    User obj = new User();

    protected override async Task OnInitializedAsync()
    {
        @if (globalSettingsService.IsUsingExternalAPI == false)
        {
            obj = await Task.Run(() => userService.GetUserById(Convert.ToInt32(Id)));
        }
        else
        {
            string FullAPI_URL = globalSettingsService.APIurl.ToString() + "api/Home/GetUserById/" + Id;

            HttpClient httpClient = new HttpClient();

            try
            {
                HttpResponseMessage response = await httpClient.GetAsync(FullAPI_URL);

                if (!response.IsSuccessStatusCode)
                {
                    string result = response.Content.ReadAsStringAsync().Result;
                    throw new Exception("Error Occured at the API Endpoint, Error Info " + result);
                }
                else
                {
                    var json = await response.Content.ReadAsStringAsync();
                    obj = JsonSerializer.Deserialize<User>(json);

                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Error Occured ath the API Endpoint, Error Info" + ex.Message);
            }
            finally { };

        }
    }

    // CRUD using internal services, instead of external API
    protected async void DeleteStaffInternalServices()
    {
        await userService.DeleteUser(obj);
        NavigationManager.NavigateTo("Staff/staffList");
    }

    //CRUD using request to external API
    protected async void DeleteStaffExternalAPI()
    {
        var formData = new MultipartFormDataContent();
        formData.Add(new StringContent(obj.Id.ToString()), "Id");
        formData.Add(new StringContent(obj.Username), "Username");
        formData.Add(new StringContent(obj.Email), "Email");
        formData.Add(new StringContent(obj.PhoneNumber), "PhoneNumber");
        formData.Add(new StringContent(obj.Skillsets), "Skillsets");
        formData.Add(new StringContent(obj.Hobby), "Hobby");

        string FullAPI_URL = globalSettingsService.APIurl.ToString() + "api/Home/DeleteStaff/" + obj.Id;

        HttpClient httpClient = new HttpClient();

        try
        {
            HttpResponseMessage response = await httpClient.DeleteAsync(FullAPI_URL);

            if (!response.IsSuccessStatusCode)
            {
                string result = response.Content.ReadAsStringAsync().Result;
                throw new Exception("Error Occured at the API Endpoint, Error Info " + result);
            }
            else
            {
                using var responseStream = await response.Content.ReadAsStreamAsync();
                string res = response.Content.ReadAsStringAsync().Result;
            }
        }
        catch (Exception ex)
        {
            throw new Exception("Error Occured ath the API Endpoint, Error Info" + ex.Message);
        }
        finally { };

        NavigationManager.NavigateTo("Staff/staffList");
    }

    protected async void Cancel()
    {
        NavigationManager.NavigateTo("Staff/staffList");
    }
}
