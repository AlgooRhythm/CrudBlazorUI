@page "/Staff/AddNewStaff"
@using WeatherForecastUI.Model
@inject WeatherForecastUI.Services.UserService userService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@inject IJSRuntime JsRuntime
@using System.Text.Json
@using System.Text

<h3>Add New Staff</h3>

<form>
    <div class="row">
        <div class="col-md-8">
            <div class="for-group">
                <label for="Username" class="control-label">Username</label>
                <input form="Username" class="form-control" @bind="obj.Username"></input>
            </div><br/>
            <div class="for-group">
                <label for="Email" class="control-label">Email</label>
                <input form="Email" class="form-control" @bind="obj.Email"></input>
            </div><br/>
            <div class="for-group">
                <label for="PhoneNumber" class="control-label">Phone Number</label>
                <input form="PhoneNumber" class="form-control" @bind="obj.PhoneNumber"></input>
            </div><br />
            <div class="for-group">
                <label for="Skillsets" class="control-label">Skillsets</label>
                <input form="Skillsets" class="form-control" @bind="obj.Skillsets"></input>
            </div><br />
            <div class="for-group">
                <label for="Hobby" class="control-label">Hobby</label>
                <input form="Hobby" class="form-control" @bind="obj.Hobby"></input>
            </div><br />

            <br/>
        </div>
    </div>
    <div class="row">
        <div class="col-md-8">
            <div class="form-group">
                <input type="button" class="btn btn-success" @onclick="@CreateNewStaffExternalAPI" value="Create" />
                <input type="button" class="btn btn-warning" @onclick="@Cancel" value="Cancel" />
            </div>
        </div>
    </div>
</form>

@code {
    string API_URL = "https://localhost:7186/";
    User obj = new User();

    // CRUD using internal services
    protected async void CreateNewStaffInternalServices()
    {
        await userService.AddNewUser(obj);
        NavigationManager.NavigateTo("Staff/staffList");
    }

    //CRUD using request to external API 
    protected async void CreateNewStaffExternalAPI()
    {
        var formData = new MultipartFormDataContent();
        formData.Add(new StringContent(obj.Username), "Username");
        formData.Add(new StringContent(obj.Email), "Email");
        formData.Add(new StringContent(obj.PhoneNumber), "PhoneNumber");
        formData.Add(new StringContent(obj.Skillsets), "Skillsets");
        formData.Add(new StringContent(obj.Hobby), "Hobby");

        string FullAPI_URL = API_URL + "api/Home/CreateNewStaff";

        HttpClient httpClient = new HttpClient();

        try
        {
            HttpResponseMessage response = await httpClient.PostAsync(FullAPI_URL, formData);

            if (!response.IsSuccessStatusCode)
            {
                string result = response.Content.ReadAsStringAsync().Result;
                throw new Exception("Error Occured at the API Endpoint, Error Info " + result);
            }
            else
            {
                using var responseStream = await response.Content.ReadAsStreamAsync();
                string res = response.Content.ReadAsStringAsync().Result;
            }
        }
        catch (Exception ex)
        {
            throw new Exception("Error Occured ath the API Endpoint, Error Info" + ex.Message);
        }
        finally { };


        NavigationManager.NavigateTo("Staff/staffList");
    }


    protected async void Cancel()
    {
        NavigationManager.NavigateTo("Staff/staffList");
    }
}
